version: '3'

# 网桥redis -> 方便相互通讯
networks:
  redis:
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.0/24"

services:
  # ============================ ↓↓↓↓↓↓ redis ↓↓↓↓↓↓ ============================

  # 主
  redis-master:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: redis-master                                                      # 容器名为'redis-master'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    # 启动redis服务并添加密码为：123456, 当主redis下线重启后变成从redis时认证主redis密码：123456, 默认不开启redis-aof方式持久化配置
    # `--slave-announce-ip 宿主机IP --slave-announce-port 端口`: 填写宿主机ip和端口 =》 强制绑定IP和端口号，默认为容器内部的ip信息 =》 解决java连接问题“Cannot reconnect to [172.18.0.3:6382]: Connection refused: no further information: /172.18.0.3:6382”
    command: redis-server /etc/redis/redis.conf --port 6380 --slave-announce-ip 172.16.16.88 --slave-announce-port 6380 --requirepass 123456 --masterauth 123456 --appendonly no
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:                            # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./redis-master-slave-sentinel/redis/master/data:/data"
      - "./redis-master-slave-sentinel/redis/master/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports:                              # 映射端口
      - "6380:6380"
    networks:
      redis:
        ipv4_address: 172.26.0.11
  # 从1
  redis-slave-1:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                   # 镜像'redis:7.0.5'
    container_name: redis-slave-1                                                    # 容器名为'redis-slave-1'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置,连接并认证master节点
    # `--slave-announce-ip 宿主机IP --slave-announce-port 端口`: 填写宿主机ip和端口 =》 强制绑定IP和端口号，默认为容器内部的ip信息 =》 解决java连接问题“Cannot reconnect to [172.18.0.3:6382]: Connection refused: no further information: /172.18.0.3:6382”
    # `--slaveof`: 只能填写ip，不能填写redis-master
    command: redis-server /etc/redis/redis.conf --port 6381 --slave-announce-ip 172.16.16.88 --slave-announce-port 6381 --requirepass 123456 --appendonly no --slaveof 172.26.0.11 6380 --masterauth 123456
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:                            # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./redis-master-slave-sentinel/redis/slave-1/data:/data"
      - "./redis-master-slave-sentinel/redis/slave-1/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports:                              # 映射端口
      - "6381:6381"
    networks:
      redis:
        ipv4_address: 172.26.0.12
    depends_on:
      - redis-master
    links:
      - redis-master
  # 从2
  redis-slave-2:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                   # 镜像'redis:7.0.5'
    container_name: redis-slave-2                                                    # 容器名为'redis-slave-2'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置,连接并认证master节点
    # `--slave-announce-ip 宿主机IP --slave-announce-port 端口`: 填写宿主机ip和端口 =》 强制绑定IP和端口号，默认为容器内部的ip信息 =》 解决java连接问题“Cannot reconnect to [172.26.0.13:6382]: Connection refused: no further information: /172.18.0.3:6382”
    # `--slaveof`: 只能填写ip，不能填写redis-master
    command: redis-server /etc/redis/redis.conf --port 6382 --slave-announce-ip 172.16.16.88 --slave-announce-port 6382 --requirepass 123456 --appendonly no --slaveof 172.26.0.11 6380 --masterauth 123456
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:                            # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./redis-master-slave-sentinel/redis/slave-2/data:/data"
      - "./redis-master-slave-sentinel/redis/slave-2/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports:                              # 映射端口
      - "6382:6382"
    networks:
      redis:
        ipv4_address: 172.26.0.13
    depends_on:
      - redis-master
    links:
      - redis-master

  # ============================ ↓↓↓↓↓↓ sentinel ↓↓↓↓↓↓ ============================

  redis-sentinel-1:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: redis-sentinel-1                                                  # 容器名为'redis-sentinel-1'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-sentinel /etc/redis/sentinel.conf
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:
      - "26379:26379"
    volumes:
      # 通过挂载目录的方式解决启动警告问题 (不要直接挂载文件！！！)
      # Could not rename tmp config file (Device or resource busy)
      # WARNING: Sentinel was not able to save the new configuration on disk!!!: Device or resource busy
      - "./redis-master-slave-sentinel/sentinel/01:/etc/redis" # `sentinel.conf`文件内容`http://download.redis.io/redis-stable/sentinel.conf`
    networks:
      redis:
        ipv4_address: 172.26.0.21
    depends_on:
      - redis-master
      - redis-slave-1
      - redis-slave-2
    links:
      - redis-master
      - redis-slave-1
      - redis-slave-2
  redis-sentinel-2:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: redis-sentinel-2                                                  # 容器名为'redis-sentinel-2'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-sentinel /etc/redis/sentinel.conf
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:
      - "26380:26380"
    volumes:
      # 通过挂载目录的方式解决启动警告问题 (不要直接挂载文件！！！)
      # Could not rename tmp config file (Device or resource busy)
      # WARNING: Sentinel was not able to save the new configuration on disk!!!: Device or resource busy
      - "./redis-master-slave-sentinel/sentinel/02:/etc/redis" # `sentinel.conf`文件内容`http://download.redis.io/redis-stable/sentinel.conf`
    networks:
      redis:
        ipv4_address: 172.26.0.22
    depends_on:
      - redis-master
      - redis-slave-1
      - redis-slave-2
      - redis-sentinel-1
    links:
      - redis-master
      - redis-slave-1
      - redis-slave-2
  redis-sentinel-3:
    image: registry.cn-hangzhou.aliyuncs.com/zhengqing/redis:7.0.5                    # 镜像'redis:7.0.5'
    container_name: redis-sentinel-3                                                  # 容器名为'redis-sentinel-3'
    restart: unless-stopped                                                                   # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    command: redis-sentinel /etc/redis/sentinel.conf
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    ports:
      - "26381:26381"
    volumes:
      # 通过挂载目录的方式解决启动警告问题 (不要直接挂载文件！！！)
      # Could not rename tmp config file (Device or resource busy)
      # WARNING: Sentinel was not able to save the new configuration on disk!!!: Device or resource busy
      - "./redis-master-slave-sentinel/sentinel/03:/etc/redis" # `sentinel.conf`文件内容`http://download.redis.io/redis-stable/sentinel.conf`
    networks:
      redis:
        ipv4_address: 172.26.0.23
    depends_on:
      - redis-master
      - redis-slave-1
      - redis-slave-2
      - redis-sentinel-1
      - redis-sentinel-2
    links:
      - redis-master
      - redis-slave-1
      - redis-slave-2
