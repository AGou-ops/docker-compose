[global_tags]
[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
[[outputs.influxdb_v2]]
  urls = ["http://${DOCKER_INFLUXDB_INIT_HOST}:8086"]
  token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"
  organization = "$DOCKER_INFLUXDB_INIT_ORG"
  bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"
  insecure_skip_verify = false
[[outputs.prometheus_client]]
  listen = ":9273"
  metric_version = 2
  path = "/metrics"
  collectors_exclude = ["gocollector", "process"]
  string_as_label = true
  export_timestamp = false
[[outputs.file]]
  files = ["stdout"]
  data_format = "influx"
  flush_interval = "1s"


#[[inputs.cpu]]
#  percpu = true
#  totalcpu = true
#  collect_cpu_time = false
#  report_active = false
#[[inputs.disk]]
#  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
#[[inputs.diskio]]
#[[inputs.kernel]]
# [[inputs.mem]]
#[[inputs.processes]]
#[[inputs.swap]]
#[[inputs.system]]

#[[inputs.syslog]]
#  server = "udp://0.0.0.0:16514"
#[[inputs.http]]
#  interval = "5s"
#  urls = ["http://10.11.43.78:5555/example.csv"]
#  data_format = "csv"
#  name_override = "TestCSV"
#  # csv_metadata_rows = 2
#  # csv_metadata_separators = [":", "="]
#  # csv_metadata_trim_set = " #"
#  # csv_measurement_column = "measurement"
#  csv_tag_columns = ['host']
#  csv_tag_overwrite = true
#  csv_column_names = ['cpu1','time_idle1','foor1','bar1']
#  csv_column_types = ['string','int','int','float']
#  csv_header_row_count = 1

[[inputs.http]]
#URL for NYC's Citi Bike station data in JSON format
  urls = ["http://10.11.43.78:5555/example.json"]
#Data from HTTP in JSON format
  data_format = "json_v2"
    [[inputs.http.json_v2]]
        measurement_name = "metric"

        [[inputs.http.json_v2.object]]
            path = "ddosraylog"
            timestamp_key = "r_time_i"
            timestamp_format = "unix_ms"
 # json_time_key = "date"
 # json_time_format = "unix"

# #Overwrite measurement name from default `http` to `citibikenyc`
# name_override = "citibikenyc"
#
# #Exclude url and host items from tags
# tagexclude = ["url", "host"]


# #Parse `stationBeanList` array only
# json_query = "stationBeanList"
#
# #Set station metadata as tags
# tag_keys = ["id", "stationName", "city", "postalCode"]
#
# #Do not include station landmark data as fields
# fielddrop = ["landMark"]
#
# #JSON values to set as string fields
# json_string_fields = ["statusValue", "stAddress1", "stAddress2", "location", "landMark"]
#
# #Latest station information reported at `lastCommunicationTime`
# json_time_key = "lastCommunicationTime"
#
# #Time is reported in Golang "reference time" format
# json_time_format = "2006-01-02 03:04:05 PM"
#
# #Time is reported in Eastern Standard Time (EST)
# json_timezone = "America/New_York"
